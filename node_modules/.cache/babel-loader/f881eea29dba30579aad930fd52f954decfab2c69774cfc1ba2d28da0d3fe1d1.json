{"ast":null,"code":"var _jsxFileName = \"/home/nastia/javaProjects/somnus/src/components/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport jwt from 'jsonwebtoken';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [authenticated, setAuthenticated] = useState(false);\n  const [userData, setUserData] = useState(null);\n  useEffect(() => {\n    // Расшифровка JWT токена и установка данных пользователя\n    const decodeToken = token => {\n      try {\n        const decoded = jwt.verify(token, 'qBTmv4oXFFR2GwjexDJ4t6fsIUIUhhXqlktXjXdkcyygs8nPVEwMfo29VDRRepYDVV5IkIxBMzr7OEHXEHd37w=='); // Используйте предоставленный секретный ключ\n\n        const {\n          id,\n          userName,\n          firstName,\n          lastName,\n          email\n        } = decoded;\n        setUserData({\n          id,\n          userName,\n          firstName,\n          lastName,\n          email\n        }); // Установка данных пользователя\n        setAuthenticated(true); // Установка аутентификации в true\n      } catch (error) {\n        console.log(\"Invalid token\");\n        setAuthenticated(false);\n      }\n    };\n\n    // Получение JWT токена из localStorage\n    const token = localStorage.getItem('token');\n    if (token) {\n      decodeToken(token);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      authenticated,\n      setAuthenticated,\n      userData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"zmLHtaQrQWUN+vivmkRO6mHTsv4=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jwt","jsxDEV","_jsxDEV","AuthContext","AuthProvider","_ref","_s","children","authenticated","setAuthenticated","userData","setUserData","decodeToken","token","decoded","verify","id","userName","firstName","lastName","email","error","console","log","localStorage","getItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/nastia/javaProjects/somnus/src/components/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport jwt from 'jsonwebtoken';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [authenticated, setAuthenticated] = useState(false);\n  const [userData, setUserData] = useState(null);\n\n  useEffect(() => {\n    // Расшифровка JWT токена и установка данных пользователя\n    const decodeToken = (token) => {\n      try {\n        const decoded = jwt.verify(token, 'qBTmv4oXFFR2GwjexDJ4t6fsIUIUhhXqlktXjXdkcyygs8nPVEwMfo29VDRRepYDVV5IkIxBMzr7OEHXEHd37w=='); // Используйте предоставленный секретный ключ\n\n        const { id, userName, firstName, lastName, email } = decoded;\n        setUserData({ id, userName, firstName, lastName, email }); // Установка данных пользователя\n        setAuthenticated(true); // Установка аутентификации в true\n      } catch (error) {\n        console.log(\"Invalid token\");\n        setAuthenticated(false);\n      }\n    };\n\n    // Получение JWT токена из localStorage\n    const token = localStorage.getItem('token');\n    if (token) {\n      decodeToken(token);\n    }\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ authenticated, setAuthenticated, userData }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,GAAG,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMO,YAAY,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EACvC,MAAM,CAACG,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMa,WAAW,GAAIC,KAAK,IAAK;MAC7B,IAAI;QACF,MAAMC,OAAO,GAAGd,GAAG,CAACe,MAAM,CAACF,KAAK,EAAE,0FAA0F,CAAC,CAAC,CAAC;;QAE/H,MAAM;UAAEG,EAAE;UAAEC,QAAQ;UAAEC,SAAS;UAAEC,QAAQ;UAAEC;QAAM,CAAC,GAAGN,OAAO;QAC5DH,WAAW,CAAC;UAAEK,EAAE;UAAEC,QAAQ;UAAEC,SAAS;UAAEC,QAAQ;UAAEC;QAAM,CAAC,CAAC,CAAC,CAAC;QAC3DX,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;MAC1B,CAAC,CAAC,OAAOY,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;QAC5Bd,gBAAgB,CAAC,KAAK,CAAC;MACzB;IACF,CAAC;;IAED;IACA,MAAMI,KAAK,GAAGW,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIZ,KAAK,EAAE;MACTD,WAAW,CAACC,KAAK,CAAC;IACpB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEX,OAAA,CAACC,WAAW,CAACuB,QAAQ;IAACC,KAAK,EAAE;MAAEnB,aAAa;MAAEC,gBAAgB;MAAEC;IAAS,CAAE;IAAAH,QAAA,EACxEA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACzB,EAAA,CA/BWF,YAAY;AAAA4B,EAAA,GAAZ5B,YAAY;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}