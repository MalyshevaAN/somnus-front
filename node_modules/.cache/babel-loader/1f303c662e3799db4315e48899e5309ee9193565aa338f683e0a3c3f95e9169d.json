{"ast":null,"code":"var _jsxFileName = \"/home/nastia/javaProjects/somnus/src/components/stars.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport styled from 'styled-components';\nimport starImage from './star.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StarsContainer = styled.div`\n  position: fixed;\n  display: grid;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 0;\n  justify-items: center;\n  align-items: center;\n  transform: translate(-50%, -50%);\n`;\n_c = StarsContainer;\nconst Star = styled.img`\n  position: absolute;\n  width: 100px; \n  height: 100px; \n  opacity: 1; \n  border-radius: 50%;\n`;\n_c2 = Star;\nconst generateRandomRotation = () => {\n  return `rotate(${Math.random() * 360}deg)`;\n};\nconst generateRandomPosition = () => {\n  const x = Math.random() * window.innerWidth;\n  const y = Math.random() * window.innerHeight;\n  return `translate(${x}px, ${y}px)`;\n};\nconst StarsBackground = () => {\n  _s();\n  const [stars, setStars] = useState([]);\n  const containerRef = useRef(null);\n  useEffect(() => {\n    const numStars = 100;\n    const generatedStars = [];\n    for (let i = 0; i < numStars; i++) {\n      generatedStars.push({\n        rotation: generateRandomRotation(),\n        position: generateRandomPosition()\n      });\n    }\n    setStars(generatedStars);\n  }, []);\n  useEffect(() => {\n    const handleMouseMove = event => {\n      const container = containerRef.current;\n      const centerX = container.offsetWidth / 2;\n      const centerY = container.offsetHeight / 2;\n      const mouseX = event.clientX;\n      const mouseY = event.clientY;\n      const offsetX = (mouseX - centerX) / 20;\n      const offsetY = (mouseY - centerY) / 20;\n      container.style.transform = `translate(${offsetX}px, ${offsetY}px)`;\n    };\n    window.addEventListener('mousemove', handleMouseMove);\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(StarsContainer, {\n    ref: containerRef,\n    children: stars.map((star, index) => /*#__PURE__*/_jsxDEV(Star, {\n      src: starImage,\n      style: {\n        transform: `${star.rotation} ${star.position}`\n      }\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(StarsBackground, \"XfzuHw0Q5unMQf1YsfMX4T9e85Q=\");\n_c3 = StarsBackground;\nexport default StarsBackground;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"StarsContainer\");\n$RefreshReg$(_c2, \"Star\");\n$RefreshReg$(_c3, \"StarsBackground\");","map":{"version":3,"names":["React","useEffect","useState","useRef","styled","starImage","jsxDEV","_jsxDEV","StarsContainer","div","_c","Star","img","_c2","generateRandomRotation","Math","random","generateRandomPosition","x","window","innerWidth","y","innerHeight","StarsBackground","_s","stars","setStars","containerRef","numStars","generatedStars","i","push","rotation","position","handleMouseMove","event","container","current","centerX","offsetWidth","centerY","offsetHeight","mouseX","clientX","mouseY","clientY","offsetX","offsetY","style","transform","addEventListener","removeEventListener","ref","children","map","star","index","src","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["/home/nastia/javaProjects/somnus/src/components/stars.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport styled from 'styled-components';\nimport starImage from './star.png';\n\nconst StarsContainer = styled.div`\n  position: fixed;\n  display: grid;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 0;\n  justify-items: center;\n  align-items: center;\n  transform: translate(-50%, -50%);\n`;\n\nconst Star = styled.img`\n  position: absolute;\n  width: 100px; \n  height: 100px; \n  opacity: 1; \n  border-radius: 50%;\n`;\n\nconst generateRandomRotation = () => {\n  return `rotate(${Math.random() * 360}deg)`;\n};\n\nconst generateRandomPosition = () => {\n  const x = Math.random() * window.innerWidth;\n  const y = Math.random() * window.innerHeight;\n  return `translate(${x}px, ${y}px)`;\n};\n\nconst StarsBackground = () => {\n  const [stars, setStars] = useState([]);\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    const numStars = 100;\n    const generatedStars = [];\n\n    for (let i = 0; i < numStars; i++) {\n      generatedStars.push({\n        rotation: generateRandomRotation(),\n        position: generateRandomPosition(),\n      });\n    }\n\n    setStars(generatedStars);\n  }, []);\n\n  useEffect(() => {\n    const handleMouseMove = (event) => {\n      const container = containerRef.current;\n      const centerX = container.offsetWidth / 2;\n      const centerY = container.offsetHeight / 2;\n      const mouseX = event.clientX;\n      const mouseY = event.clientY;\n\n      const offsetX = (mouseX - centerX) / 20;\n      const offsetY = (mouseY - centerY) / 20;\n\n      container.style.transform = `translate(${offsetX}px, ${offsetY}px)`;\n    };\n\n    window.addEventListener('mousemove', handleMouseMove);\n\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, []);\n\n  return (\n    <StarsContainer ref={containerRef}>\n      {stars.map((star, index) => (\n        <Star\n          key={index}\n          src={starImage}\n          style={{\n            transform: `${star.rotation} ${star.position}`,\n          }}\n        />\n      ))}\n    </StarsContainer>\n  );\n};\n\nexport default StarsBackground;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,SAAS,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,cAAc,GAAGJ,MAAM,CAACK,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GAXIF,cAAc;AAapB,MAAMG,IAAI,GAAGP,MAAM,CAACQ,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GANIF,IAAI;AAQV,MAAMG,sBAAsB,GAAGA,CAAA,KAAM;EACnC,OAAQ,UAASC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAI,MAAK;AAC5C,CAAC;AAED,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;EACnC,MAAMC,CAAC,GAAGH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGG,MAAM,CAACC,UAAU;EAC3C,MAAMC,CAAC,GAAGN,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGG,MAAM,CAACG,WAAW;EAC5C,OAAQ,aAAYJ,CAAE,OAAMG,CAAE,KAAI;AACpC,CAAC;AAED,MAAME,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMyB,YAAY,GAAGxB,MAAM,CAAC,IAAI,CAAC;EAEjCF,SAAS,CAAC,MAAM;IACd,MAAM2B,QAAQ,GAAG,GAAG;IACpB,MAAMC,cAAc,GAAG,EAAE;IAEzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAE;MACjCD,cAAc,CAACE,IAAI,CAAC;QAClBC,QAAQ,EAAElB,sBAAsB,CAAC,CAAC;QAClCmB,QAAQ,EAAEhB,sBAAsB,CAAC;MACnC,CAAC,CAAC;IACJ;IAEAS,QAAQ,CAACG,cAAc,CAAC;EAC1B,CAAC,EAAE,EAAE,CAAC;EAEN5B,SAAS,CAAC,MAAM;IACd,MAAMiC,eAAe,GAAIC,KAAK,IAAK;MACjC,MAAMC,SAAS,GAAGT,YAAY,CAACU,OAAO;MACtC,MAAMC,OAAO,GAAGF,SAAS,CAACG,WAAW,GAAG,CAAC;MACzC,MAAMC,OAAO,GAAGJ,SAAS,CAACK,YAAY,GAAG,CAAC;MAC1C,MAAMC,MAAM,GAAGP,KAAK,CAACQ,OAAO;MAC5B,MAAMC,MAAM,GAAGT,KAAK,CAACU,OAAO;MAE5B,MAAMC,OAAO,GAAG,CAACJ,MAAM,GAAGJ,OAAO,IAAI,EAAE;MACvC,MAAMS,OAAO,GAAG,CAACH,MAAM,GAAGJ,OAAO,IAAI,EAAE;MAEvCJ,SAAS,CAACY,KAAK,CAACC,SAAS,GAAI,aAAYH,OAAQ,OAAMC,OAAQ,KAAI;IACrE,CAAC;IAED5B,MAAM,CAAC+B,gBAAgB,CAAC,WAAW,EAAEhB,eAAe,CAAC;IAErD,OAAO,MAAM;MACXf,MAAM,CAACgC,mBAAmB,CAAC,WAAW,EAAEjB,eAAe,CAAC;IAC1D,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE3B,OAAA,CAACC,cAAc;IAAC4C,GAAG,EAAEzB,YAAa;IAAA0B,QAAA,EAC/B5B,KAAK,CAAC6B,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACrBjD,OAAA,CAACI,IAAI;MAEH8C,GAAG,EAAEpD,SAAU;MACf2C,KAAK,EAAE;QACLC,SAAS,EAAG,GAAEM,IAAI,CAACvB,QAAS,IAAGuB,IAAI,CAACtB,QAAS;MAC/C;IAAE,GAJGuB,KAAK;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKX,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAErB,CAAC;AAACrC,EAAA,CApDID,eAAe;AAAAuC,GAAA,GAAfvC,eAAe;AAsDrB,eAAeA,eAAe;AAAC,IAAAb,EAAA,EAAAG,GAAA,EAAAiD,GAAA;AAAAC,YAAA,CAAArD,EAAA;AAAAqD,YAAA,CAAAlD,GAAA;AAAAkD,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}